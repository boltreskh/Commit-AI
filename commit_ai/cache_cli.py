#!/usr/bin/env python3
"""
Utilit√°rio de linha de comando para gerenciar o cache do Commit-AI

Fornece comandos para visualizar, limpar e gerenciar o cache.
"""

import click
from pathlib import Path
from commit_ai.cache import CommitCache
from commit_ai.logger import logger


@click.group()
def cache_cli():
    """üóÑÔ∏è  Gerenciador de Cache do Commit-AI"""
    pass


@cache_cli.command()
def stats():
    """üìä Mostrar estat√≠sticas do cache"""
    cache = CommitCache()
    stats_data = cache.stats()
    
    if 'error' in stats_data:
        click.echo(click.style(f"‚ùå Erro: {stats_data['error']}", fg='red'))
        return
    
    click.echo(click.style("üìä Estat√≠sticas do Cache", fg='cyan', bold=True))
    click.echo(f"üìÅ Diret√≥rio: {stats_data['cache_dir']}")
    click.echo(f"üìà Total de entradas: {stats_data['total_entries']}")
    click.echo(f"‚è∞ Idade m√°xima: {stats_data['max_age_hours']:.1f} horas")
    
    provider_stats = stats_data.get('provider_stats', {})
    if provider_stats:
        click.echo("\nü§ñ Entradas por provedor:")
        for provider, count in provider_stats.items():
            click.echo(f"  - {provider}: {count}")
    
    if stats_data.get('oldest_entry'):
        click.echo(f"\nüìÖ Entrada mais antiga: {stats_data['oldest_entry']}")
    
    if stats_data['total_entries'] == 0:
        click.echo(click.style("\nüí° Cache vazio - nenhuma entrada encontrada.", fg='yellow'))


@cache_cli.command()
@click.confirmation_option(prompt='Tem certeza que deseja limpar todo o cache?')
def clear():
    """üßπ Limpar todo o cache"""
    cache = CommitCache()
    
    try:
        old_stats = cache.stats()
        cache.clear_all()
        
        click.echo(click.style(
            f"‚úÖ Cache limpo com sucesso! {old_stats['total_entries']} entradas removidas.", 
            fg='green'
        ))
    except Exception as e:
        click.echo(click.style(f"‚ùå Erro ao limpar cache: {e}", fg='red'))


@cache_cli.command()
def cleanup():
    """üïí Remover entradas expiradas do cache"""
    cache = CommitCache()
    
    try:
        old_stats = cache.stats()
        cache.clear_expired()
        new_stats = cache.stats()
        
        removed = old_stats['total_entries'] - new_stats['total_entries']
        
        if removed > 0:
            click.echo(click.style(
                f"‚úÖ Limpeza conclu√≠da! {removed} entradas expiradas removidas.",
                fg='green'
            ))
        else:
            click.echo(click.style("‚ú® Nenhuma entrada expirada encontrada.", fg='blue'))
    except Exception as e:
        click.echo(click.style(f"‚ùå Erro na limpeza: {e}", fg='red'))


@cache_cli.command()
@click.argument('hours', type=int)
def set_max_age(hours):
    """‚è±Ô∏è  Definir idade m√°xima do cache (em horas)"""
    if hours <= 0:
        click.echo(click.style("‚ùå Erro: Horas deve ser um n√∫mero positivo.", fg='red'))
        return
    
    # Criar novo cache com a idade especificada
    cache = CommitCache(max_age_hours=hours)
    
    click.echo(click.style(
        f"‚úÖ Idade m√°xima do cache definida para {hours} horas.",
        fg='green'
    ))
    
    # Mostrar estat√≠sticas atualizadas
    stats_data = cache.stats()
    click.echo(f"üìä Total de entradas v√°lidas: {stats_data['total_entries']}")


@cache_cli.command()
def info():
    """‚ÑπÔ∏è  Informa√ß√µes detalhadas sobre o cache"""
    cache = CommitCache()
    cache_dir = Path.home() / '.commit-ai' / 'cache'
    
    click.echo(click.style("‚ÑπÔ∏è  Informa√ß√µes do Cache", fg='cyan', bold=True))
    click.echo(f"üìÅ Diret√≥rio: {cache_dir}")
    click.echo(f"üíæ Arquivo do banco: {cache_dir / 'cache.db'}")
    
    # Verificar se os arquivos existem
    db_file = cache_dir / 'cache.db'
    if db_file.exists():
        file_size = db_file.stat().st_size
        click.echo(f"üìè Tamanho do arquivo: {file_size:,} bytes")
    else:
        click.echo("‚ö†Ô∏è  Arquivo de cache n√£o encontrado")
    
    # Mostrar configura√ß√µes
    click.echo(f"‚è∞ Idade m√°xima padr√£o: 24 horas")
    click.echo(f"üóÉÔ∏è  Formato: SQLite")
    click.echo(f"üîÑ Cache autom√°tico: Habilitado por padr√£o")


if __name__ == '__main__':
    cache_cli()
